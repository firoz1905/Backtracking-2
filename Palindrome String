Approach 1 :
Time Complexity : O(n*2^n) = O(n) ( Worst Case if the S ='aaaaa' then it would be exponential as we iterate by partioning at every node and palindrome check with be done)
Space Complexity :
class Solution:
    def partition(self, s: str) -> List[List[str]]:
        self.res=[]
        if s is None or len(s)==0: 
            return res   ### Edge Case 
        self.backtrack(s,[])
        return self.res
    
    def backtrack (self,s,temp):
        ## base Case
        if len(s)==0: 
            self.res.append(temp)
        ## Logic
        for i in range (1,len(s)+1):
            ### Action:
            if (self.ispalindrome(s[:i])):
                temp.append(s[:i])            
            ### Recurse
                self.backtrack(s[i+1:],temp)
             ### Back Track
                temp.pop()
            
    
    def ispalindrome(self,s:str) -> bool:
            l,r=0,len(s)-1
            if l==r or not s:
                return True
            while(l<r):
                if not s[l].isalnum():
                    l+=1
                elif not s[r].isalnum():
                    r-=1
                elif s[l].lower()!=s[r].lower(): 
                    return False
                else:
                    l+=1
                    r-=1
            return True
